generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  name        String
  email       String?
  picture     String
  userCourses UserCourse[]
}

model Course {
  id          String       @id
  name        String
  desc        String?
  code        String
  createdAt   DateTime     @default(now()) @map("created_at")
  background  String?
  invitations Invitation[]
  userCourses UserCourse[]

  @@map("course")
}

model Invitation {
  id         String          @id
  email      String
  invitedBy  String          @map("invited_by")
  courseId   String          @map("course_id")
  state      InvitationState
  createdAt  DateTime        @default(now()) @map("created_at")
  role       UserCourseRole
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userCourse UserCourse?

  @@map("invitation")
}

model UserCourse {
  userId       String         @map("user_id")
  courseId     String         @map("course_id")
  role         UserCourseRole
  invitationId String?        @unique @map("invitation_id")
  joinedAt     DateTime       @default(now()) @map("joined_at")
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  invitation   Invitation?    @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@map("user_course")
}

enum InvitationState {
  PROCESSING
  SENT
  ACCEPTED
  REJECTED

  @@map("invitation_state")
}

enum UserCourseRole {
  HOST
  TEACHER
  STUDENT

  @@map("user_course_role")
}
